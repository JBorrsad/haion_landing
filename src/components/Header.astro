---
import ThemeToggle from "./ThemeToggle.astro"

const navItems = [
  {
    title: "Sobre nosotros",
    label: "sobre-nosotros",
    url: "#sobre-nosotros",
  },
  {
    title: "Servicios",
    label: "servicios",
    url: "#servicios",
  },
  {
    title: "Contacto",
    label: "contacto",
    url: "#contacto",
  },
]
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex px-3 text-sm font-medium rounded-full text-white dark:text-white justify-center items-center bg-black/30 backdrop-blur-sm border border-white/20"
  >
    {
      navItems.map((link) => (
        <a
          class="relative block px-2 py-2 transition hover:text-blue-500 dark:hover:text-blue-500"
          aria-label={link.label}
          href={link.url}
          data-section={link.label}
        >
          {link.title}
        </a>
      ))
    }
    <ThemeToggle />
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    // Función para scroll suave a las secciones
    const handleNavClick = (e: Event) => {
      const target = e.target as HTMLAnchorElement
      const sectionId = target.getAttribute("data-section")
      
      if (sectionId && sectionId !== "contacto") {
        e.preventDefault()
        const section = document.getElementById(sectionId)
        if (section) {
          section.scrollIntoView({ 
            behavior: "smooth",
            block: "start"
          })
        }
      }
    }

    // Agregar event listeners a los enlaces de navegación
    navItems.forEach((item) => {
      item.addEventListener("click", handleNavClick)
    })

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-500")
            } else {
              item.classList.remove("text-blue-500")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  nav {
    @apply bg-black/30 backdrop-blur-sm;
  }

  @keyframes nav-shadown {
    from {
      @apply bg-black/30 backdrop-blur-sm border-white/20;
      color: white;
    }
    to {
      @apply shadow-lg ring-1 backdrop-blur-md bg-white/95 border-gray-200;
      color: rgb(75, 85, 99);
      padding: 0.25rem 0.75rem;
    }
  }

  @media (prefers-color-scheme: dark) {
    @keyframes nav-shadown {
      from {
        @apply bg-black/30 backdrop-blur-sm border-white/20;
        color: white;
      }
      to {
        @apply shadow-lg ring-1 backdrop-blur-md bg-gray-800/95 border-gray-600;
        color: rgb(229, 231, 235);
        padding: 0.25rem 0.75rem;
      }
    }
  }
</style>

